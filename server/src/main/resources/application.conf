job-monitor {
  queue = ${?NEXTFLOW_STATUS_QUEUE_ID}
  region = ${?REGION}
  parallelism = ${?CLOUDWATCH_PARALLELISM}

  retry {
    max-retries = ${?MONITOR_MAX_RETRIES}
    delay = ${?MONITOR_RETRY_DELAY}
    reset-after = ${?MONITOR_RETRY_RESET_AFTER}
  }

  throttle {
    parallelism = ${?EVENT_THROTTLE_PARALLELISM}
    period = ${?EVENT_THROTTLE_PERIOD}
    period = "1 second"
  }
}

ecs {
  region = ${?REGION}
  cluster = ${?ECS_CLUSTER_ARN}
  raw-security-groups = ${?ECS_SECURITY_GROUPS}
  raw-subnet-ids = ${?ECS_SUBNET_IDS}

  nextflow {
    access-key-id = ${?ECS_IAM_ACCESS_KEY_ID}

    access-key-secret = ${?ECS_IAM_ACCESS_KEY_SECRET}
  }

  task {
    iam-role = ${?ECS_IAM_ROLE_ARN}
    container-memory = ${?ECS_TASK_CONTAINER_MEMORY}
    container-cpu = ${?ECS_TASK_CONTAINER_CPU}
    max-attempts = ${?ECS_MAX_TASK_RETRIES}
    task-definition = ${?ECS_TASK_DEFINITION}
  }
}

pennsieve-api {
  base-url = ${?API_BASE_URL}
  queue-size = ${?API_QUEUE_SIZE}
  rate-limit = ${?API_RATE_LIMIT}
}

notifications {
  queue = ${?NOTIFICATIONS_SQS_ID}
  region = ${?REGION}
}

uploads-consumer {
  queue = ${?JOBS_HANDLER_UPLOAD_CONSUMER_SQS_ID}
  region = ${?REGION}
}

job-scheduler {
  max-tasks = ${?MAX_TASKS}
  buffer-size = ${?JOB_SCHEDULER_BUFFER_SIZE}
  buffer-size = 100

  retry {
    max-retries = ${?JOB_SCHEDULER_MAX_RETRIES}
    delay = ${?JOB_SCHEDULER_RETRY_DELAY}
    reset-after = ${?JOB_SCHEDULER_RETRY_RESET_AFTER}
  }

  throttle {
    parallelism = ${?EVENT_THROTTLE_PARALLELISM}
    period = ${?EVENT_THROTTLE_PERIOD}
    period = "1 second"
  }
}

jwt {
  key = ${?JWT_SECRET_KEY}
  duration = "5 minutes"
}

postgres {
  host = ${?POSTGRES_HOST}
  port = 5432
  database = ${?POSTGRES_DATABASE}
  user = ${?POSTGRES_USER}
  password = ${?POSTGRES_PASSWORD}

  // Currently min-threads, max-threads and max-connections MUST be the same value
  // https://github.com/slick/slick/issues/1938
  min-threads = ${?POSTGRES_MIN_MAX_THREADS_AND_CONNECTIONS}
  max-threads = ${?POSTGRES_MIN_MAX_THREADS_AND_CONNECTIONS}
  queue-size = ${?POSTGRES_QUEUE_SIZE}
  max-connections = ${?POSTGRES_MIN_MAX_THREADS_AND_CONNECTIONS}
}

pusher {
  environment = ${?ENVIRONMENT}
}

s-3 {
  host = ${?S3_HOST}
  region = ${?REGION}
  etl-bucket = ${?S3_BUCKET}
}

watch-dog {
  hours-running = ${?WATCH_DOG_HOURS_RUNNING}

  retry {
    max-retries = ${?WATCH_DOG_MAX_RETRIES}
    delay = ${?WATCH_DOG_RETRY_DELAY}
    reset-after = ${?WATCH_DOG_RETRY_RESET_AFTER}
  }

  no-job-throttle {
    parallelism = ${?WATCH_DOG_NO_JOB_THROTTLE_PARALLELISM}
    period = ${?WATCH_DOG_NO_JOB_THROTTLE_PERIOD}
    period = "1 second"
  }

  job-throttle {
   ecs {
      parallelism = ${?WATCH_DOG_JOB_ECS_THROTTLE_PARALLELISM}
      period = ${?WATCH_DOG_JOB_ECS_THROTTLE_PERIOD}
      period = "1 second"
    }

    sink {
      parallelism = ${?WATCH_DOG_JOB_SINK_THROTTLE_PARALLELISM}
      period = ${?WATCH_DOG_JOB_SINK_THROTTLE_PERIOD}
      period = "1 second"
    }
  }

  job-state {
    minutes-stuck = ${?WATCH_DOG_JOB_STATE_MINUTES_STUCK}
    max-retries = ${?WATCH_DOG_JOB_STATE_MAX_RETRIES}
    throttle {
      parallelism = ${?WATCH_DOG_JOB_STATE_THROTTLE_PARALLELISM}
      period = ${?WATCH_DOG_JOB_STATE_THROTTLE_PERIOD}
      period = "1 second"
    }
  }

  timer {
    start-after = ${?WATCH_DOG_TIMER_START_AFTER}
    start-after = "1 second"
    run-every = ${?WATCH_DOG_TIMER_RUN_EVERY}
    run-every = "10 seconds"
  }
}
